# syntax=docker/dockerfile:experimental

ARG DISTRO=bionic
FROM lmark1/uav_ros_stack:$DISTRO

LABEL maintainer ana.milas@fer.hr

# after every FROM statements all the ARGs get collected and are no longer available. 
ARG ROS_DISTRO=melodic
ARG CATKIN_WORKSPACE=uav_ws
ARG HOME=/root

# Agent forwarding during docker build https://stackoverflow.com/questions/43418188/ssh-agent-forwarding-during-docker-build
# install ssh client and git
RUN apt-get install openssh-client git

# download public key for github.com
RUN mkdir -p -m 0600 ~/.ssh && ssh-keyscan github.com >> ~/.ssh/known_hosts

RUN apt-get update && \
    apt-get install -y \
        git \
        openssh-server \
        libmysqlclient-dev \
        ros-$ROS_DISTRO-realsense2-camera \
        ros-$ROS_DISTRO-rgbd-launch \
        ros-$ROS_DISTRO-realsense2-description \
        ros-$ROS_DISTRO-openzen-sensor \
        # ros-$ROS_DISTRO-mav-msgs \ -- there is no ros-noetic-mav-msgs?
        libglew-dev \
        libglfw3 \
        libglfw3-dev  \
        nano \
        tmux \
        git-gui \
        dnsmasq  \
        lsb-release \
        gnupg2 \
        apt-utils \
        ca-certificates \
        bzip2 \
        libx11-6 \
        # Base tools
        cmake \
        build-essential \
        unzip \
        pkg-config \
        python-dev \
        # OpenCV dependencies
        python-numpy \
        # Pangolin dependencies
        libgl1-mesa-dev \
        libglew-dev \
        libpython2.7-dev \
        libeigen3-dev \
        apt-transport-https \
        software-properties-common \
        tzdata && \
        dpkg-reconfigure --frontend noninteractive tzdata

RUN curl https://raw.githubusercontent.com/IntelRealSense/librealsense/master/config/99-realsense-libusb.rules >> /etc/udev/rules.d/99-realsense-libusb.rules

ARG ROS_HOSTNAME=localhost.local
ARG ROS_MASTER_URI=http://localhost.local:11311
ARG ROS_IP=localhost.local

# Build OpenCV (3.0 or higher should be fine)
# RUN apt-get install -y python3-dev python3-numpy 
# RUN apt-get install -y python-dev python-numpy
# RUN apt-get install -y libavcodec-dev libavformat-dev libswscale-dev
# RUN apt-get install -y libgstreamer-plugins-base1.0-dev libgstreamer1.0-dev
# RUN apt-get install -y libgtk-3-dev

RUN cd /tmp && git clone https://github.com/opencv/opencv.git && \
    cd opencv && \
    git checkout 3.2.0 && \
    mkdir build && cd build && \
    cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_EXAMPLES=OFF  -DBUILD_DOCS=OFF -DBUILD_PERF_TESTS=OFF -DBUILD_TESTS=OFF -DENABLE_PRECOMPILED_HEADERS=OFF -DCMAKE_INSTALL_PREFIX=/usr/local .. && \
    make -j8 && make install && \
    cd / && rm -rf /tmp/opencv

# Build Pangolin
RUN cd /tmp && git clone https://github.com/stevenlovegrove/Pangolin && \
    cd Pangolin && git checkout v0.6 && mkdir build && cd build && \
    cmake  -DUSE_PANGOLIN_VIEWER=OFF -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=-std=c++11 .. && \
    make -j8 && make install && \
    cd / && rm -rf /tmp/Pangolin


# Clone and build ORB_SLAM3
WORKDIR $HOME
RUN --mount=type=ssh git clone git@github.com:AnaBatinovic/ORB_SLAM3.git
RUN cd /$HOME/ORB_SLAM3 && \
    git checkout cpu_only && \
    chmod +x build.sh && \
    ./build.sh

# Clone and build ORB_SLAM3_ROS
RUN touch ~/.bashrc
RUN echo "ROS_PACKAGE_PATH=/opt/ros/melodic/share:/ORB_SLAM3/Examples/ROS" >> ~/.bashrc
RUN bash -c "source ~/.bashrc"
RUN cd /$HOME/ORB_SLAM3 && \
    chmod +x build_ros.sh && \
    ./build_ros.sh
    
RUN echo "source /opt/ros/melodic/setup.bash" >> ~/.bashrc

# Clone and build orbslam3 ros wrapper
WORKDIR $HOME/$CATKIN_WORKSPACE/src
RUN  --mount=type=ssh git clone git@github.com:AnaBatinovic/orb_slam3_ros_wrapper.git
RUN /bin/bash -c "catkin build -j8"
RUN echo "source ~/$CATKIN_WORKSPACE/devel/setup.bash" >> ~/.bashrc

RUN cp ~/ORB_SLAM3/Vocabulary/ORBvoc.txt /$HOME/$CATKIN_WORKSPACE/src/orb_slam3_ros_wrapper/config

CMD ["bash"]
